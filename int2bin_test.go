package int2bin

import "testing"

func TestBin(t *testing.T) {
	t.Run("signed 8", func(t *testing.T) {
		var tt = map[int8]string{
			0:    "0000 0000",
			1:    "0000 0001",
			127:  "0111 1111",
			85:   "0101 0101",
			-128: "1000 0000",
			-1:   "1111 1111",
			-86:  "1010 1010",
		}

		for val, want := range tt {
			got, err := Bin(val)
			if err != nil {
				t.Fatal(err)
			}
			if got != want {
				t.Errorf("\nwant: %s\n got: %s", want, got)
			}
		}
	})

	t.Run("signed 16", func(t *testing.T) {
		var tt = map[int16]string{
			0:      "0000 0000 0000 0000",
			1:      "0000 0000 0000 0001",
			32767:  "0111 1111 1111 1111",
			21845:  "0101 0101 0101 0101",
			-32768: "1000 0000 0000 0000",
			-1:     "1111 1111 1111 1111",
			-21846: "1010 1010 1010 1010",
		}

		for val, want := range tt {
			got, err := Bin(val)
			if err != nil {
				t.Fatal(err)
			}
			if got != want {
				t.Errorf("\nwant: %s\n got: %s", want, got)
			}
		}
	})

	t.Run("signed 32", func(t *testing.T) {
		var tt = map[int32]string{
			0:           "0000 0000 0000 0000 0000 0000 0000 0000",
			1:           "0000 0000 0000 0000 0000 0000 0000 0001",
			2147483647:  "0111 1111 1111 1111 1111 1111 1111 1111",
			1431655765:  "0101 0101 0101 0101 0101 0101 0101 0101",
			-2147483648: "1000 0000 0000 0000 0000 0000 0000 0000",
			-1:          "1111 1111 1111 1111 1111 1111 1111 1111",
			-1431655766: "1010 1010 1010 1010 1010 1010 1010 1010",
		}

		for val, want := range tt {
			got, err := Bin(val)
			if err != nil {
				t.Fatal(err)
			}
			if got != want {
				t.Errorf("\nwant: %s\n got: %s", want, got)
			}
		}
	})

	t.Run("signed 64", func(t *testing.T) {
		var tt = map[int64]string{
			0:                    "0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000",
			1:                    "0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0001",
			9223372036854775807:  "0111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111",
			6148914691236517205:  "0101 0101 0101 0101 0101 0101 0101 0101 0101 0101 0101 0101 0101 0101 0101 0101",
			-9223372036854775808: "1000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000",
			-1:                   "1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111",
			-6148914691236517206: "1010 1010 1010 1010 1010 1010 1010 1010 1010 1010 1010 1010 1010 1010 1010 1010",
		}

		for val, want := range tt {
			got, err := Bin(val)
			if err != nil {
				t.Fatal(err)
			}
			if got != want {
				t.Errorf("\nwant: %s\n got: %s", want, got)
			}
		}
	})

	t.Run("unsigned 8", func(t *testing.T) {
		var tt = map[uint8]string{
			0:   "0000 0000",
			1:   "0000 0001",
			127: "0111 1111",
			85:  "0101 0101",
			128: "1000 0000",
			255: "1111 1111",
			170: "1010 1010",
		}

		for val, want := range tt {
			got, err := Bin(val)
			if err != nil {
				t.Fatal(err)
			}
			if got != want {
				t.Errorf("\nwant: %s\n got: %s", want, got)
			}
		}
	})

	t.Run("unsigned 16", func(t *testing.T) {
		var tt = map[uint16]string{
			0:     "0000 0000 0000 0000",
			1:     "0000 0000 0000 0001",
			32767: "0111 1111 1111 1111",
			21845: "0101 0101 0101 0101",
			32768: "1000 0000 0000 0000",
			65535: "1111 1111 1111 1111",
			43690: "1010 1010 1010 1010",
		}

		for val, want := range tt {
			got, err := Bin(val)
			if err != nil {
				t.Fatal(err)
			}
			if got != want {
				t.Errorf("\nwant: %s\n got: %s", want, got)
			}
		}
	})

	t.Run("unsigned 32", func(t *testing.T) {
		var tt = map[uint32]string{
			0:          "0000 0000 0000 0000 0000 0000 0000 0000",
			1:          "0000 0000 0000 0000 0000 0000 0000 0001",
			2147483647: "0111 1111 1111 1111 1111 1111 1111 1111",
			1431655765: "0101 0101 0101 0101 0101 0101 0101 0101",
			2147483648: "1000 0000 0000 0000 0000 0000 0000 0000",
			4294967295: "1111 1111 1111 1111 1111 1111 1111 1111",
			2863311530: "1010 1010 1010 1010 1010 1010 1010 1010",
		}

		for val, want := range tt {
			got, err := Bin(val)
			if err != nil {
				t.Fatal(err)
			}
			if got != want {
				t.Errorf("\nwant: %s\n got: %s", want, got)
			}
		}
	})

	t.Run("unsigned 64", func(t *testing.T) {
		var tt = map[uint64]string{
			0:                    "0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000",
			1:                    "0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0001",
			9223372036854775807:  "0111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111",
			6148914691236517205:  "0101 0101 0101 0101 0101 0101 0101 0101 0101 0101 0101 0101 0101 0101 0101 0101",
			9223372036854775808:  "1000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000",
			18446744073709551615: "1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111",
			12297829382473034410: "1010 1010 1010 1010 1010 1010 1010 1010 1010 1010 1010 1010 1010 1010 1010 1010",
		}

		for val, want := range tt {
			got, err := Bin(val)
			if err != nil {
				t.Fatal(err)
			}
			if got != want {
				t.Errorf("\nwant: %s\n got: %s", want, got)
			}
		}
	})
}
